/*
    DEFINITIONS for CSC488S Source Language Winter 2016
*/

package compiler488.parser;

// TODO: You can add Java import statements here as necessary

/*
    SYMBOL LISTS

    CUP reserved words are case-sensitive and cannot be used as names of
    terminals or non-terminals. This list includes the following:

        action code extends import init left non nonassoc nonterminal package
        parser precedence right scan start super terminal with

*/

// Keyword terminals returned by the scanner (with no value attached):
terminal AND, OR, NOT, TRUE, FALSE;
terminal BOOLEAN, INTEGER, FUNCTION, PROCEDURE;
terminal DO, ELSE, EXIT, IF;
terminal READ, REPEAT, RETURN, NEWLINE, THEN, UNTIL;
terminal VAR, WHEN, WHILE, WITH, WRITE;

// Special-character terminals (with no value attached):
terminal L_PAREN, R_PAREN, L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY;
terminal EQUAL, GREATER, LESS, COMMA, DOT, QUESTION, COLON;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal UMINUS;
terminal L_EQUAL, G_EQUAL, NOT_EQUAL;

// Terminals returned by the scanner that carry a value of a specific Java type:
terminal String     IDENT;
terminal Integer    INTCONST;
terminal String     TEXTCONST;

/*
    To define non-terminals that return no value:

        nonterminal nameList;

    To define non-terminals that do return a value (think AST generation):

        nonterminal JavaType nameList;
*/

nonterminal program, scope, variable, variable_list, expression, statement, statement_list,
            output, output_list, declaration, declaration_list, bound, general_bound,
            variable_name, variable_name_list, type, argument_list, parameter_list, parameter,
            array_member;

precedence nonassoc ELSE;
precedence nonassoc IF;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQUAL, NOT_EQUAL, LESS, L_EQUAL, GREATER, G_EQUAL;
precedence left PLUS, MINUS;
precedence left DIVIDE, TIMES;
precedence left UMINUS;

/*
    GRAMMAR SECTION
*/

// This specifies the initial symbol of the grammar.
start with program;

/*
    Notice that sometimes the action must be inside the production rule, not after
    it. This is a subtle yet significant difference from YACC. This is because the
    CUP parser is looking ahead one token. It ALWAYS reads one more token before it
    will act on the production.
 */

// The main program.
program ::= scope;

statement ::= variable COLON EQUAL expression
    | IF expression THEN statement
    | IF expression THEN statement ELSE statement
    | WHILE expression DO statement
    | REPEAT statement UNTIL expression
    | EXIT
    | EXIT INTCONST
    | EXIT WHEN expression
    | EXIT INTCONST WHEN expression
    | RETURN WITH expression
    | RETURN
    | WRITE output_list
    | READ variable_list
    | IDENT // procedure call without arguments 
    | IDENT L_PAREN argument_list R_PAREN // procedure call with arguments
    | scope;

statement_list ::= statement
    | statement_list statement;

expression ::= INTCONST
    | MINUS expression %prec UMINUS
    | expression PLUS expression
    | expression MINUS expression
    | expression TIMES expression
    | expression DIVIDE expression
    | TRUE
    | FALSE
    | NOT expression
    | expression AND expression
    | expression OR expression
    | expression EQUAL expression
    | expression NOT EQUAL expression %prec NOT_EQUAL
    | expression LESS expression
    | expression LESS EQUAL expression %prec L_EQUAL
    | expression GREATER expression
    | expression GREATER EQUAL expression %prec G_EQUAL
    | L_PAREN expression R_PAREN
    | L_PAREN expression QUESTION expression COLON expression R_PAREN
    | IDENT // variable name or function call without arguments
    | IDENT L_PAREN argument_list R_PAREN // function call with arguments
    | array_member;

declaration_list ::= declaration
    | declaration_list declaration;

declaration ::= VAR variable_name_list COLON type
    | FUNCTION IDENT COLON type scope
    | FUNCTION IDENT L_PAREN parameter_list R_PAREN COLON type scope
    | PROCEDURE IDENT scope
    | PROCEDURE IDENT L_PAREN parameter_list R_PAREN scope;

variable_name ::= IDENT
    | IDENT L_SQUARE bound R_SQUARE
    | IDENT L_SQUARE bound COMMA bound R_SQUARE;

variable_name_list ::= variable_name
    | variable_name_list COMMA variable_name;

output ::= expression
    | TEXTCONST
    | NEWLINE;

output_list ::= output
    | output_list COMMA output;

bound ::= INTCONST
    | general_bound DOT DOT general_bound;

general_bound ::= INTCONST
    | MINUS INTCONST;

variable ::= IDENT | array_member;
    
array_member ::= IDENT L_SQUARE expression R_SQUARE
    | IDENT L_SQUARE expression COMMA expression R_SQUARE;

variable_list ::= variable
    | variable_list COMMA variable;

scope ::= L_CURLEY declaration_list statement_list R_CURLEY
    | L_CURLEY statement_list R_CURLEY
    | L_CURLEY R_CURLEY;

type ::= INTEGER
    | BOOLEAN;

argument_list ::= expression
    | argument_list COMMA expression;

parameter ::= IDENT COLON type;

parameter_list ::= parameter
    | parameter_list COMMA parameter;

