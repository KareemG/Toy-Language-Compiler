
{
    % Addition
    {
        var a : integer
        var b : integer

        a := 4

        b := 10

        a := a + b
    }

    % And statement
    {
        if 5 > 4 and -3 < 4 then
            write "PASS"
        else
            write "FAIL"
    }

    % Division
    {
        var a : integer
        var b : integer

        a := 10

        b := 2

        a := a / b
    }

    % Equality operation
    {
        if 5 = 5 then
            write "PASS"
        else
            write "FAIL"
    }

    % Greater than or equal to operation
    {
        if 5 >= 4 then
            write "PASS"
    }

    % Greater than operation
    {
        if 5 > 4 then
            write "PASS"
    }

    % Inequality operation
    {
        if 5 not = 6 then
            write "PASS"
        else
            write "FAIL"
    }

    % Less than or equal to operation
    {
        if 4 <= 5 then
            write "PASS"
    }

    % Less than operation
    {
        if 4 < 5 then
            write "PASS"
    }

    % Multiple arithmetic operations
    {
        var x : integer

        x := 5 + 6 - 4 + (6 * 3) / 2 - 8 * 9 * 2 - (6 / 2 / 3)
    }

    % Multiplication
    {
        var a : integer
        var b : integer

        a := 4

        b := 10

        a := a * b
    }

    % Or statement
    {
        if 0 > 4 or -3 < 4 then
            write "PASS"
        else
            write "FAIL"
    }

    % Subtraction
    {
        var a : integer
        var b : integer

        a := 4

        b := 10

        a := a - b
    }

    % Declaring and assigning 2D boolean arrays
    {
        var a[1,2] : boolean
        var b[1,3..10] : boolean
        var c[-3..3,4..7] : boolean

        a[1,1] := true
        b[1,10] := false
        c[-2,5] := true 
    }

    % Declaring and assigning 2D integer arrays
    {
        var a[1,2] : integer
        var b[1,3..10] : integer
        var c[-3..3,4..7] : integer

        a[1,1] := 5
        b[1,10] := 0
        c[-2,7] := -2
    }

    % Declaring and assigning boolean arrays
    {
        var a[4] : boolean
        var b[1..10] : boolean
        var c[-3..3] : boolean

        a[1] := false
        b[4] := true
        c[-3] := false
    }

    % Declaring and assigning a boolean variable
    {
        var x : boolean

        x := true
    }

    % If then else statement
    {
        if true then
            write "PASS"
        else
            write "FAIL"
    }

    % If then statement
    {
        if true then
            write "PASS"
    }

    % Declaring and assigning integer arrays
    {
        var a[4] : integer
        var b[1..10] : integer
        var c[-3..3] : integer

        a[1] := 0
        b[10] := 12
        c[-1] := -1
    }

    % Declaring and assigning an integer variable
    {
        var x : integer
        
        x := 5
    }

    % Read statement
    {
        var x : integer

        read x
    }

    % Ternary operator
    {
        var x : integer

        x := (5 > 4 ? 5 : 4)
    }

    % Write newline
    {
        write newline
    }

    % Write statement
    {
        write "Hello World!"
    }

    % Exit integer when statement
    {
        var x : integer

        x := 0

        while x < 10 do
        {
            x := x + 1

            exit 10 when x = 5
        }
    }

    % Exit with integer statement
    {
        var x : integer

        x := 0

        while x < 10 do
        {
            exit
        }
    }

    % Exit when statement
    {
        var x : integer
        var y : integer

        x := 0
        y := 0

        while x < 10 do
        {
            x := x + 1
            y := y + 1

            exit when y = 5
        }
    }

    % Exit statement
    {
        var x : integer

        x := 0

        repeat
        {
            exit
        }
        until x = 5
    }

    % Repeat until loop
    {
        var x : integer
        x := 0

        repeat
            x := x + 1
        until
            x = 10
    }

    % While loop
    {
        var x : integer
        x := 0

        while x < 10 do
        {
            x := x + 1
        }
    }

    % Declaring and calling a function that returns a boolean
    {
        function test : boolean
        {
            return with true
        }

        write test
    }

    % Declaring and calling a function from a function
    {
        function getNum : integer
        {
            return with 10
        }


        function test : integer
        {
            return with getNum
        }

        write test
    }

    % Declaring and calling a function that requires multiple arguments
    {
        function test(a : integer, b : boolean) : integer
        {
            if b then
                return with a
        }

        test(2, true)
    }

    % Declaring and calling a function that returns an integer
    {
        function test : integer
        {
            return with 5
        }

        write test
    }

    % Declaring and calling a procedure with multiple arguments
    {
        procedure printAdd(a : integer, b : integer)
        {
            write a + b
        }

        printAdd(2,3)
    }

    % Declaring and calling a procedure
    {
        procedure test
        {
            write "Hello World!"
        }

        test
    }

    % Declaring and calling a recursive function
    {
        function factorial(n : integer) : integer
        {
            if n = 0 then
                return with 0
            else
                return with n * factorial(n - 1)
        }

        var x : integer

        x := factorial(5)
    }

    % Declaring and calling a recursive procedure
    {
        procedure printNum(n : integer)
        {
            if n = 0 then
            {
                write "I'm done!"
                write newline
            }
            else
            {
                write n
                write newline
                printNum(n - 1)
            }
        }

        printNum(3)
    }
}
