PASSING TEST CASES
==================
A1a.488 	: test case from assignment 1, modified to work in assignment 3.
		  Simple addition, subtraction, multiplication, and division
		  operation.
A1b.488 	: test case from assignment 1, modified to work in assignment 3.
		  declaration of arrays and then assigning values to the array.
A1d.488 	: test case from assignment 1, modified to work in assignment 3.
		  series of functions and procedures which calls different
		  functions and procedures.
A1e.488 	: test case from assignment 1, modified to work in assignment 3.
		  series of recursive functions and procedures call
comp.488 	: series of comparison operations tested for correctness
cond-expr.488 	: check to see if conditional expression is working as intended
fmulti-param.488: check correctness for function with multiple parameters
func-param.488 	: similar to "simple-func" but with function with parameter
loop-exit.488 	: similar to "single-loop.488" test, but exits out of loop with "exit when"
		  condition rather than the loop condition
nested-func.488 : check correctness of calling function within another function
nested-loop.488 : check correctness of nested loops
or.488 		: checks correctness of "or" operation
pmulti-param.488: check correctness for procedure with multiple parameters
proc-param.488 	: similar to "simple-proc" but with procedure with parameter
recurse-func.488: check correctness of recursive function call
recurse-proc.488: check correctness of recursive procedure call
repeat-until.488: similar to "single-loop.488" test, but uses repeat-until format
simple-func.488 : check correctness of function call procedure with simple function
simple-if.488 	: test the correctness of if condition check and proper branching
simple-proc.488 : check correctness of procedure call procedure with simple procedure
single-loop.488 : test to see that simple loop and while loop condition is working as intended
var-shadow.488 	: check that the variable shadowing is as expected

FAILING TEST CASES
==================

CODEGEN
-------
int-overflow.488 	: test to see if program errors when integer overflow occurs
int-underflow.488 	: test to see if program errors when integer underflow occurs
no-assign.488 		: we should not be allowed to use a variable without assigning a value. This test checks for that
stackoverflow.488 	: an infinite recursive call should lead to stackoverflow
zero-division.488 	: dividing a value by zero should lead to an error

SEMANTICS (from A3)
-------------------
add_bools.488                 : test that adding two booleans fail
add_int_and_bool.488          : test that adding an integer and boolean fail
array_type_mismatch.488       : test that inserting a value of a wrong type in an array fail
assign_bool_to_int.488        : test that assigning a boolean to an integer fail
assign_int_to_bool.488        : test that assigning an integer to a boolean fail
assign_undeclared_var.488     : test that assigning a value to an undeclared variable fail
bad_array.488                 : test that declaring an array with invalid bounds (bound 1 > bound 2) fail
call_undeclared_function.488  : test that calling an undeclared function fail
call_undeclared_procedure.488 : test that calling an undeclared procedure fail
call_variable.488             : test that calling a variable as a function fail
different_parameter_type.488  : test that passing an argument with the wrong type fail
duplicate_definition.488      : test that duplicating a function definition with a variable definition fail
duplicate_function.488        : test that redeclaring a function/procedure fail
duplicate_variable.488        : test that redeclaring a variable fail
excessive_parameters.488      : test that too many arguments to a function fail
exit_invalid.488              : test that using the exit statement to break out more loops than they currently exist fail
exit_zero.488                 : test that using the exit statement to break out of 0 loops fail
external_exit.488             : test that using the exit statement outside of a loop fail
external_return.488           : test that using the return statement outside of a function fail
missing_parameters.488        : test that calling a function with missing arguments fail
no_parameters.488             : test that passing arguments to a function that has no parameters fail
no_return_stmt.488            : test that declaring function without a return statement fail
out_of_scope_function.488     : test that calling a function outside of scope fail
out_of_scope_variable.488     : test that using a variable outside of scope fail
return_from_func.488          : test that using a procedural return from a function fail
return_with_proc.488          : test that returning with a value in a procedure fail
sub_int_and_bool_expr.488     : test that subtraction between an integer and boolean fail
var_same_name_as_function.488 : test that declaring a variable with the same name of the function it is defined in fail
var_same_name_as_param.488    : test that declaring a variable with the same name of a parameter in its function fail
conditional_operator_different_return_type : test that a conditional operator with different result types fails
conditional_operator_different_types       : test that a conditional operator with different true and false return types fails

SYNTAX (from A2)
----------------
expression-bang-instead.488		: Checks for incorrect inequality syntax ("!=" instead of "not=")
expression-inequality-wrong-order.488	: Checks if the parser throws an error if "=<" or ">=" is given.
expression-noteq.488			: Checks for incorrect inequality usage by comparing two expr with just 'not'
integer-increment.488			: Check that if the user attempts to increment integer by "++", parser throws an error.
integer-increment-2.488			: Similar to "integer-increment" but with "+=" instead.
integer-power-of.488			: Checks if user attempts to perform exponents by "**", parser throws an error.
3d-array.488				: Since our language only supports up to 2d array, make sure it throws an error if user attempts to declare 3d array.
array-no-comma.488			: When declaring 2d array, comma must be given to separate between first array size and second. This test checks for that.
array-no-rsquare.488			: Checks for array declaration where right squared bracket is forgotten.
array-wrong-parenthesis.488		: Should get syntax error if user declares an array with parenthesis rather than square brackets.
broken-if-structure.488			: `if` statements should always have 'then' and 'else' in correct order. Parser should throw an error otherwise.
declaration-in-middle.488		: Since our language only supports declaration first, then statement (in a given scope), this test checks that syntax error occurs if there is declaration in the middle.
declaration-no-statement.488		: Program does not support programs with only declaration. This test checks whether our compiler throws an error
ident-starts-with-integer.488		: All identifiers should not start with numbers. This test will check if we get syntax error if it does.
if-mult-stmt-no-scope.488		: We are expected for if statement body to use scope if it requires multiple statements. Otherwise, syntax error should occur
keyword-as-var-name.488			: This test checks whether error occurs if user attempts to make a variable with keyword as identifier.
var-dec-dangling-comma.488		: Makes sure we throw an error if there are any dangling commas
write-no-comma.488			: When writing multiple outputs, it should be comma-separated
loop-declaration-without-scope.488	: Our language does not support declaration of local variable without scope in a loop. This will test for this case.
loop-do-when.488			: This test checks for the syntax error for cases where user uses 'do' 'when' at the same time.
loop-while-no-cond.488			: This test checks for the syntax error when expression is not given after while keyword.
loop-while-until.488			: Similar to 'loop-do-when.488' test, checks for syntax error for when user uses 'while' 'until' at the same time.
function-name-integer.488		: Function name should be an identifier, as such, cannot be a number.
function-no-type.488			: Functions are meant to return a value. Hence, it must specify the return type.
procedure-with-type.488			: Opposite of 'function-no-type.488'. Since procedures does not return a value, it should not have a return type.
scope-not-closed.488			: Checks for the cases where user may have forgotten to close the scope with '}'.
scope-not-found.488			: If user forgets to start the program with scope '{', then we should raise an error.
